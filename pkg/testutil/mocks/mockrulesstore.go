// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rulesstore/rulesstore.go
//
// Generated by this command:
//
//	mockgen -destination=pkg/testutil/mocks/mockrulesstore.go -package=mocks -source=pkg/rulesstore/rulesstore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/kuoss/ingress-annotator/pkg/model"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockIRulesStore is a mock of IRulesStore interface.
type MockIRulesStore struct {
	ctrl     *gomock.Controller
	recorder *MockIRulesStoreMockRecorder
}

// MockIRulesStoreMockRecorder is the mock recorder for MockIRulesStore.
type MockIRulesStoreMockRecorder struct {
	mock *MockIRulesStore
}

// NewMockIRulesStore creates a new mock instance.
func NewMockIRulesStore(ctrl *gomock.Controller) *MockIRulesStore {
	mock := &MockIRulesStore{ctrl: ctrl}
	mock.recorder = &MockIRulesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRulesStore) EXPECT() *MockIRulesStoreMockRecorder {
	return m.recorder
}

// ExtractRulesFromAnnotations mocks base method.
func (m *MockIRulesStore) ExtractRulesFromAnnotations(objs ...client.Object) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range objs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExtractRulesFromAnnotations", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractRulesFromAnnotations indicates an expected call of ExtractRulesFromAnnotations.
func (mr *MockIRulesStoreMockRecorder) ExtractRulesFromAnnotations(objs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRulesFromAnnotations", reflect.TypeOf((*MockIRulesStore)(nil).ExtractRulesFromAnnotations), objs...)
}

// GetRules mocks base method.
func (m *MockIRulesStore) GetRules() *model.Rules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRules")
	ret0, _ := ret[0].(*model.Rules)
	return ret0
}

// GetRules indicates an expected call of GetRules.
func (mr *MockIRulesStoreMockRecorder) GetRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockIRulesStore)(nil).GetRules))
}

// UpdateRules mocks base method.
func (m *MockIRulesStore) UpdateRules(cm *v1.ConfigMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRules", cm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRules indicates an expected call of UpdateRules.
func (mr *MockIRulesStoreMockRecorder) UpdateRules(cm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRules", reflect.TypeOf((*MockIRulesStore)(nil).UpdateRules), cm)
}
